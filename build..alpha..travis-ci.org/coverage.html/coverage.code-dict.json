{"/home/travis/build/npmtest/node-npmtest-cool-ascii-faces/test.js":"/* istanbul instrument in package npmtest_cool_ascii_faces */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cool-ascii-faces/lib.npmtest_cool_ascii_faces.js":"/* istanbul instrument in package npmtest_cool_ascii_faces */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cool_ascii_faces = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cool_ascii_faces = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cool-ascii-faces/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cool-ascii-faces && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cool_ascii_faces */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cool_ascii_faces\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cool_ascii_faces.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cool_ascii_faces.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cool_ascii_faces.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cool_ascii_faces.__dirname + '/lib.npmtest_cool_ascii_faces.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cool-ascii-faces/node_modules/cool-ascii-faces/index.js":"var spigot = require(\"stream-spigot\")\n\nvar faces = [\n  \"( .-. )\",\n  \"( .o.)\",\n  \"( `·´ )\",\n  \"( ° ͜ ʖ °)\",\n  \"( ͡° ͜ʖ ͡°)\",\n  \"( ⚆ _ ⚆ )\",\n  \"( ︶︿︶)\",\n  \"( ﾟヮﾟ)\",\n  \"(\\\\/)(°,,,°)(\\\\/)\",\n  \"(¬_¬)\",\n  \"(¬º-°)¬\",\n  \"(¬‿¬)\",\n  \"(°ロ°)☝\",\n  \"(´・ω・)っ\",\n  \"(ó ì_í)\",\n  \"(ʘᗩʘ')\",\n  \"(ʘ‿ʘ)\",\n  \"(̿▀̿ ̿Ĺ̯̿̿▀̿ ̿)̄\",\n  \"(͡° ͜ʖ ͡°)\",\n  \"ᕦ( ͡° ͜ʖ ͡°)ᕤ\",\n  \"(ಠ_ಠ)\",\n  \"(ಠ‿ಠ)\",\n  \"(ಠ⌣ಠ)\",\n  \"(ಥ_ಥ)\",\n  \"(ಥ﹏ಥ)\",\n  \"(ง ͠° ͟ل͜ ͡°)ง\",\n  \"(ง ͡ʘ ͜ʖ ͡ʘ)ง\",\n  \"(ง •̀_•́)ง\",\n  \"(ง'̀-'́)ง\",\n  \"(ง°ل͜°)ง\",\n  \"(ง⌐□ل͜□)ง\",\n  \"(ღ˘⌣˘ღ)\",\n  \"(ᵔᴥᵔ)\",\n  \"(•ω•)\",\n  \"(•◡•)/\",\n  \"(⊙ω⊙)\",\n  \"(⌐■_■)\",\n  \"(─‿‿─)\",\n  \"(╯°□°）╯\",\n  \"(◕‿◕)\",\n  \"(☞ﾟ∀ﾟ)☞\",\n  \"(❍ᴥ❍ʋ)\",\n  \"(っ◕‿◕)っ\",\n  \"(づ｡◕‿‿◕｡)づ\",\n  \"(ノಠ益ಠ)ノ\",\n  \"(ノ・∀・)ノ\",\n  \"(；一_一)\",\n  \"(｀◔ ω ◔´)\",\n  \"(｡◕‿‿◕｡)\",\n  \"(ﾉ◕ヮ◕)ﾉ\",\n  \"*<{:¬{D}}}\",\n  \"=^.^=\",\n  \"t(-.-t)\",\n  \"| (• ◡•)|\",\n  \"~(˘▾˘~)\",\n  \"¬_¬\",\n  \"¯(°_o)/¯\",\n  \"¯\\\\_(ツ)_/¯\",\n  \"°Д°\",\n  \"ɳ༼ຈل͜ຈ༽ɲ\",\n  \"ʅʕ•ᴥ•ʔʃ\",\n  \"ʕ´•ᴥ•`ʔ\",\n  \"ʕ•ᴥ•ʔ\",\n  \"ʕ◉.◉ʔ\",\n  \"ʕㅇ호ㅇʔ\",\n  \"ʕ；•`ᴥ•´ʔ\",\n  \"ʘ‿ʘ\",\n  \"͡° ͜ʖ ͡°\",\n  \"ζ༼Ɵ͆ل͜Ɵ͆༽ᶘ\",\n  \"Ѱζ༼ᴼل͜ᴼ༽ᶘѰ\",\n  \"ب_ب\",\n  \"٩◔̯◔۶\",\n  \"ಠ_ಠ\",\n  \"ಠoಠ\",\n  \"ಠ~ಠ\",\n  \"ಠ‿ಠ\",\n  \"ಠ⌣ಠ\",\n  \"ಠ╭╮ಠ\",\n  \"ರ_ರ\",\n  \"ง ͠° ل͜ °)ง\",\n  \"๏̯͡๏﴿\",\n  \"༼ ºººººل͟ººººº ༽\",\n  \"༼ ºل͟º ༽\",\n  \"༼ ºل͟º༼\",\n  \"༼ ºل͟º༽\",\n  \"༼ ͡■ل͜ ͡■༽\",\n  \"༼ つ ◕_◕ ༽つ\",\n  \"༼ʘ̚ل͜ʘ̚༽\",\n  \"ლ(´ڡ`ლ)\",\n  \"ლ(́◉◞౪◟◉‵ლ)\",\n  \"ლ(ಠ益ಠლ)\",\n  \"ᄽὁȍ ̪őὀᄿ\",\n  \"ᔑ•ﺪ͟͠•ᔐ\",\n  \"ᕕ( ᐛ )ᕗ\",\n  \"ᕙ(⇀‸↼‶)ᕗ\",\n  \"ᕙ༼ຈل͜ຈ༽ᕗ\",\n  \"ᶘ ᵒᴥᵒᶅ\",\n  \"(ﾉಥ益ಥ）ﾉ\",\n  \"≧☉_☉≦\",\n  \"⊙▃⊙\",\n  \"⊙﹏⊙\",\n  \"┌( ಠ_ಠ)┘\",\n  \"╚(ಠ_ಠ)=┐\",\n  \"◉_◉\",\n  \"◔ ⌣ ◔\",\n  \"◔̯◔\",\n  \"◕‿↼\",\n  \"◕‿◕\",\n  \"☉_☉\",\n  \"☜(⌒▽⌒)☞\",\n  \"☼.☼\",\n  \"♥‿♥\",\n  \"⚆ _ ⚆\",\n  \"✌(-‿-)✌\",\n  \"〆(・∀・＠)\",\n  \"ノ( º _ ºノ)\",\n  \"ノ( ゜-゜ノ)\",\n  \"ヽ( ͝° ͜ʖ͡°)ﾉ\",\n  \"ヽ(`Д´)ﾉ\",\n  \"ヽ༼° ͟ل͜ ͡°༽ﾉ\",\n  \"ヽ༼ʘ̚ل͜ʘ̚༽ﾉ\",\n  \"ヽ༼ຈل͜ຈ༽ง\",\n  \"ヽ༼ຈل͜ຈ༽ﾉ\",\n  \"ヽ༼Ὸل͜ຈ༽ﾉ\",\n  \"ヾ(⌐■_■)ノ\",\n  \"꒰･◡･๑꒱\",\n  \"﴾͡๏̯͡๏﴿\",\n  \"｡◕‿◕｡\",\n  \"ʕノ◔ϖ◔ʔノ\",\n  \"(ノಠ益ಠ)ノ彡┻━┻\",\n  \"(╯°□°）╯︵ ┻━┻\",\n  \"꒰•̥̥̥̥̥̥̥ ﹏ •̥̥̥̥̥̥̥̥๑꒱\",\n  \"ಠ_ರೃ\",\n  \"(ू˃̣̣̣̣̣̣︿˂̣̣̣̣̣̣ ू)\",\n  \"(ꈨຶꎁꈨຶ)۶”\",\n  \"(ꐦ°᷄д°᷅)\",\n  \"(۶ૈ ۜ ᵒ̌▱๋ᵒ̌ )۶ૈ=͟͟͞͞ ⌨\",\n  \"₍˄·͈༝·͈˄₎◞ ̑̑ෆ⃛\",\n  \"(*ﾟ⚙͠ ∀ ⚙͠)ﾉ❣\",\n  \"٩꒰･ัε･ั ꒱۶\",\n  \"ヘ（。□°）ヘ\",\n  \"˓˓(ृ　 ु ॑꒳’)ु(ृ’꒳ ॑ ृ　)ु˒˒˒\",\n  \"꒰✘Д✘◍꒱\",\n  \"૮( ᵒ̌ૢཪᵒ̌ૢ )ა\",\n  \"“ψ(｀∇´)ψ\",\n  \"ಠﭛಠ\",\n  \"(๑>ᴗ<๑)\",\n  \"(۶ꈨຶꎁꈨຶ )۶ʸᵉᵃʰᵎ\",\n  \"٩(•̤̀ᵕ•̤́๑)ᵒᵏᵎᵎᵎᵎ\",\n  \"(oT-T)尸\",\n  \"(✌ﾟ∀ﾟ)☞\",\n  \"ಥ‿ಥ\",\n  \"ॱ॰⋆(˶ॢ‾᷄﹃‾᷅˵ॢ)\",\n  \"┬┴┬┴┤  (ಠ├┬┴┬┴\",\n  \"( ˘ ³˘)♥\",\n  \"Σ (੭ु ຶਊ ຶ)੭ु⁾⁾\",\n  \"(⑅ ॣ•͈ᴗ•͈ ॣ)\",\n  \"ヾ(´￢｀)ﾉ\",\n  \"(•̀o•́)ง\",\n  \"(๑•॒̀ ູ॒•́๑)\",\n  \"⚈้̤͡ ˌ̫̮ ⚈้̤͡\",\n  \"=͟͟͞͞ =͟͟͞͞ ﾍ( ´Д`)ﾉ\",\n  \"(((╹д╹;)))\",\n  \"•̀.̫•́✧\",\n  \"(ᵒ̤̑ ₀̑ ᵒ̤̑)\",\n  \"\\\\_(ʘ_ʘ)_/\",\n  \"乙(ツ)乙\",\n  \"乙(のっの)乙\",\n  \"ヾ(¯∇￣๑)\",\n  \"\\\\_(ʘ_ʘ)_/\",\n  \"༼;´༎ຶ ۝ ༎ຶ༽\",\n  \"(▀̿Ĺ̯▀̿ ̿)\",\n  \"(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧\",\n  \"(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ ✧ﾟ･: *ヽ(◕ヮ◕ヽ)\",\n  \"┬┴┬┴┤ ͜ʖ ͡°) ├┬┴┬┴\",\n  \"┬┴┬┴┤(･_├┬┴┬┴\",\n  \"(͡ ͡° ͜ つ ͡͡°)\",\n  \"( ͡°╭͜ʖ╮͡° )\",\n  \"(• ε •)\",\n  \"[̲̅$̲̅(̲̅ ͡° ͜ʖ ͡°̲̅)̲̅$̲̅]\",\n  \"| (• ◡•)| (❍ᴥ❍ʋ)\",\n  \"(◕‿◕✿)\",\n  \"(╯°□°)╯︵ ʞooqǝɔɐɟ\",\n  \"(☞ﾟヮﾟ)☞ ☜(ﾟヮﾟ☜)\",\n  \"(づ￣ ³￣)づ\",\n  \"(;´༎ຶД༎ຶ`)\",\n  \"♪~ ᕕ(ᐛ)ᕗ\",\n  \"༼ つ  ͡° ͜ʖ ͡° ༽つ\",\n  \"༼ つ ಥ_ಥ ༽つ\",\n  \"ಥ_ಥ\",\n  \"( ͡ᵔ ͜ʖ ͡ᵔ )\",\n  \"ヾ(⌐■_■)ノ♪\",\n  \"~(˘▾˘~)\",\n  \"\\\\ (•◡•) /\",\n  \"(~˘▾˘)~\",\n  \"(._.) ( l: ) ( .-. ) ( :l ) (._.)\",\n  \"༼ ºل͟º ༼ ºل͟º ༼ ºل͟º ༽ ºل͟º ༽ ºل͟º ༽\",\n  \"┻━┻ ︵ヽ(`Д´)ﾉ︵ ┻━┻\",\n  \"ᕦ(ò_óˇ)ᕤ\",\n  \"(•_•) ( •_•)>⌐■-■ (⌐■_■)\",\n  \"(☞ຈل͜ຈ)☞\",\n  \"˙ ͜ʟ˙\",\n  \"☜(˚▽˚)☞\",\n  \"(｡◕‿◕｡)\",\n  \"（╯°□°）╯︵( .o.)\",\n  \"(っ˘ڡ˘ς)\",\n  \"┬──┬ ノ( ゜-゜ノ)\",\n  \"ಠ⌣ಠ\",\n  \"( ಠ ͜ʖರೃ)\",\n  \"ƪ(˘⌣˘)ʃ\",\n  \"¯\\\\(°_o)/¯\",\n  \"ლ,ᔑ•ﺪ͟͠•ᔐ.ლ\",\n  \"(´・ω・`)\",\n  \"(´・ω・)っ由\",\n  \"(° ͡ ͜ ͡ʖ ͡ °)\",\n  \"Ƹ̵̡Ӝ̵̨̄Ʒ\",\n  \"ಠ_ಥ\",\n  \"ಠ‿↼\",\n  \"(>ლ)\",\n  \"(▰˘◡˘▰)\",\n  \"(✿´‿`)\",\n  \"◔ ⌣ ◔\",\n  \"｡゜(｀Д´)゜｡\",\n  \"┬─┬ノ( º _ ºノ)\",\n  \"(ó ì_í)=óò=(ì_í ò)\",\n  \"(/) (°,,°) (/)\",\n  \"┬─┬ ︵ /(.□. ）\",\n  \"^̮^\",\n  \"(>人<)\",\n  \"(~_^)\",\n  \"(･.◤)\",\n  \">_>\",\n  \"(^̮^)\",\n  \"=U\",\n  \"(｡╹ω╹｡)\",\n  \"ლ(╹◡╹ლ)\",\n  \"(●´⌓`●)\",\n  \"（[∂]ω[∂]）\",\n  \"U^ｴ^U\",\n  \"(〒ó〒)\",\n  \"(T^T)\",\n  \"(íoì)\",\n  \"(#•v•#)\",\n  \"(•^u^•)\",\n  \"!(^3^)!\",\n  \"\\\\(°°\\\\”)\",\n  \"(°o°:)\",\n  \"(° o°)!\",\n  \"(oﾛo)!!\",\n  \"(òロó)\",\n  \"(ò皿ó)\",\n  \"(￣･_______･￣)\",\n  \"ヾ(๑╹◡╹)ﾉ'\",\n  \"(ლ╹◡╹)ლ\",\n  \"（◞‸◟）\",\n  \"(✿◖◡◗)\",\n  \"(　´･‿･｀)\",\n  \"(*｀益´*)がう\",\n  \"(ヾﾉ'д'o)ﾅｨﾅｨ\",\n  \"❤(◕‿◕✿)\",\n  \"(◡‿◡*)❤\",\n  \"(o'ω'o)\",\n  \"(｡･ˇ_ˇ･｡)ﾑｩ…\",\n  \"♬♩♫♪☻(●´∀｀●）☺♪♫♩♬\",\n  \"(✿ฺ◕ฺ‿◕ฺ）ｳﾌｯ♥\",\n  \"(つД⊂)ｴｰﾝ\",\n  \"(つД・)ﾁﾗ\",\n  \"(*´ω｀*)\",\n  \"(✪‿✪)ノ\",\n  \"╲(｡◕‿◕｡)╱\",\n  \"ლ(^o^ლ)\"\n]\n\nmodule.exports = function() {\n  return faces[Math.floor(Math.random() * faces.length)]\n}\n\nmodule.exports.faces = faces\n\nmodule.exports.faceStream = function() {\n  return spigot(faces)\n}\n","/home/travis/build/npmtest/node-npmtest-cool-ascii-faces/node_modules/cool-ascii-faces/cli.js":"#!/usr/bin/env node\n\nvar coolFace = require('./');\nvar args = process.argv.splice(2);\n\nif (args.indexOf('-a') !== -1 || args.indexOf('--all') !== -1) {\n  coolFace.faces.forEach(function (face) {\n    process.stdout.write(face + '\\n');\n  });\n\n  return;\n}\n\nprocess.stdout.write(coolFace() + '\\n');\n"}